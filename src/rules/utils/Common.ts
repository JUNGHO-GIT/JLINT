// Common.ts

import * as lodash from "lodash";
import stripComments from "strip-comments";

// -------------------------------------------------------------------------------------------------
export const removeComments = async (
  contentsParam: string,
  fileExt: string
) => {
  try {
    // 0. result
    let httpResult1: string = "";
    let httpResult2: string = "";
    let httpResult3: string = "";

    // 1. rules
    let languageExt: string;
    let minifyRules: any;

    // 1. language specific rules
    if (fileExt === "html" || fileExt === "jsp" || fileExt === "vue") {
      languageExt = "html";
      minifyRules = async (result2: string) => {
        const { minify } = await import("html-minifier-terser");
        const minifyResult = await minify(result2, {
          html5: true,
          minifyCSS: false,
          minifyJS: false,
          minifyURLs: false,
          removeComments: true,
          removeAttributeQuotes: false,
          removeEmptyAttributes: true,
          removeEmptyElements: false,
          removeOptionalTags: false,
          removeRedundantAttributes: false,
          removeTagWhitespace: false,
          keepClosingSlash: true,
          includeAutoGeneratedTags: false,
          maxLineLength: 0,
          noNewlinesBeforeTagClose: false,
          trimCustomFragments: false,
          removeStyleLinkTypeAttributes: true,
          removeScriptTypeAttributes: true,
          caseSensitive: true,
          useShortDoctype: true,
          collapseBooleanAttributes:  false,
          decodeEntities: true,
          collapseWhitespace: true,
          collapseInlineTagWhitespace: true,
          preserveLineBreaks: true,
          preventAttributesEscaping: true,
          quoteCharacter: '"',
          sortClassName: true,
          sortAttributes: true,
          continueOnParseError: true,
          conservativeCollapse: true,
          processScripts: [],
          processConditionalComments: false,

        });

        return minifyResult;
      }
    }
    else if (fileExt === "css" || fileExt === "scss" || fileExt === "less") {
      languageExt = "css";
      minifyRules = async (result2: string) => {
        const { default: CleanCSS } = await import("clean-css");
        const minifyResult = new CleanCSS({
          level: {
            1: {
              specialComments: 'none',
              removeEmpty: true,
              removeWhitespace: true,
              replaceMultipleZeros: true,
              removeNegativePaddings: true,
            },
            2: {
              mergeMedia: true,
              removeEmpty: true,
              removeDuplicateFontRules: true,
              removeDuplicateMediaBlocks: true,
              removeDuplicateRules: true,
              removeUnusedAtRules: false,
              restructureRules: true,
              skipProperties: [],
            },
          },
        }).minify(result2);

        return minifyResult.styles;
      }
    }
    else if (fileExt === "java") {
      languageExt = "java";
      minifyRules = async (result2: string) => {
        return result2;
      }
    }
    else if (
      fileExt === "javascript" || fileExt === "js" ||
      fileExt === "javascriptreact" || fileExt === "jsx" ||
      fileExt === "typescript" || fileExt === "ts" ||
      fileExt === "typescriptreact" || fileExt === "tsx"
    ) {
      languageExt = "javascript";
      minifyRules = async (result2: string) => {
        const { minify } = await import("terser");
        const minifyResult = await minify(result2, {
          compress: false,
          mangle: true,
          format: {
            comments: false,
          },
        });

        return minifyResult.code;
      }
    }
    else if (fileExt === "json" || fileExt === "jsonc") {
      languageExt = "json";
      minifyRules = async (result2: string) => {
        const { default: stripJsonComments } = await import("strip-json-comments");
        const minifyResult = stripJsonComments(result2);

        return minifyResult;
      }
    }
    else if (fileExt === "xml") {
      languageExt = "xml";
      minifyRules = async (result2: string) => {
        return result2;
      }
    }

    // 2. `http://` -> `httpp`
    const pattern1 = (
      /("|')(\s*)(http:\/\/)([\n\s\S]*?)("|')/gm
    );
    const pattern2 = (
      /("|')(\s*)(https:\/\/)([\n\s\S]*?)("|')/gm
    );
    const pattern3 = (
      /("|')(\s*)(@\{http:\/\/)([\n\s\S]*?)("|')/gm
    );
    const pattern4 = (
      /("|')(\s*)(@\{https:\/\/)([\n\s\S]*?)("|')/gm
    );

    httpResult1 = (
      lodash.chain(contentsParam)
      .replace(pattern1, (_, p1, p2, p3, p4, p5) => (
        `${p1}${p2}httpp${p4}${p5}`
      ))
      .replace(pattern2, (_, p1, p2, p3, p4, p5) => (
        `${p1}${p2}httpps${p4}${p5}`
      ))
      .replace(pattern3, (_, p1, p2, p3, p4, p5) => (
        `${p1}${p2}@{httpp${p4}${p5}`
      ))
      .replace(pattern4, (_, p1, p2, p3, p4, p5) => (
        `${p1}${p2}@{httpps${p4}${p5}`
      ))
      .value()
    );

    // 3-1. remove comments
    httpResult2 = stripComments(httpResult1, {
      language: `${languageExt}`,
      preserveNewlines: false,
      keepProtected: false,
      block: true,
      line: true,
    });

    // 3-2. minify
    if (minifyRules) {
      httpResult3 = await minifyRules(httpResult2);
    }

    // 4. `httpp` -> `http://`
    const pattern1Re = (
      /("|')(\s*)(httpp)([\n\s\S]*?)("|')/gm
    );
    const pattern2Re = (
      /("|')(\s*)(httpps)([\n\s\S]*?)("|')/gm
    );
    const pattern3Re = (
      /("|')(\s*)(@\{httpp)([\n\s\S]*?)("|')/gm
    );
    const pattern4Re = (
      /("|')(\s*)(@\{httpps)([\n\s\S]*?)("|')/gm
    );

    const httpResult4 = (
      lodash.chain(httpResult3)
      .replace(pattern1Re, (_, p1, p2, p3, p4, p5) => (
        `${p1}${p2}http://${p4}${p5}`
      ))
      .replace(pattern2Re, (_, p1, p2, p3, p4, p5) => (
        `${p1}${p2}https://${p4}${p5}`
      ))
      .replace(pattern3Re, (_, p1, p2, p3, p4, p5) => (
        `${p1}${p2}@{http://${p4}${p5}`
      ))
      .replace(pattern4Re, (_, p1, p2, p3, p4, p5) => (
        `${p1}${p2}@{https://${p4}${p5}`
      ))
      .value()
    );

    // 5. 빈 줄나눔 공백 제거
    const pattern5 = (
      /(\n)(\s*)(\n)/gm
    );
    const result = (
      lodash.chain(httpResult4)
      .replace(pattern5, (_, p1, p2, p3) => (
        `${p1}`
      ))
      .value()
    );

    console.log(`_____________________\n removeComments Activated!`);
    return result;
  }
  catch (err: any) {
    console.error(err.message);
    return contentsParam;
  }
};

// -------------------------------------------------------------------------------------------------
export const singleTags = async (
  contentsParam: string,
  fileExt: string
) => {

  if (fileExt === "xml") {
    return contentsParam;
  }
  try {
    const rules1 = (
      /(<)(area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)(\s*)([\n\s\S]*?)(\s*)(?<!=)(\/>)/gm
    );

    const result = (
      lodash.chain(contentsParam)
      .replace(rules1, (_, p1, p2, p3, p4, p5, p6) => (
        `${p1}${p2}${p3}${p4}${p5}/>`
      ))
      .value()
    );

    console.log(`_____________________\n singleTags Activated!`);
    return result;
  }
  catch (err: any) {
    console.error(err.message);
    return contentsParam;
  }
};