// Html.ts

import * as vscode from "vscode";
import lodash from "lodash";
import prettier from "prettier";
import type {Options as PrettierOptions} from "prettier";
import type {Plugin as PrettierPlugin} from "prettier";
import { minify } from "html-minifier-terser";
import strip from "strip-comments";
import type {Options as StripOptions} from "strip-comments";
import { createRequire } from "module";

// 0. removeComments -------------------------------------------------------------------------------
export const removeComments = async (
  contentsParam: string,
  fileTabSize: number,
  fileEol: string,
	fileExt: string
) => {
  try {
    // 1. `http://` -> `httpp`
    const pattern1 = (
      /("|')(\s*)(http:\/\/)([\n\s\S]*?)("|')/gm
    );
    const pattern2 = (
      /("|')(\s*)(https:\/\/)([\n\s\S]*?)("|')/gm
    );
    const pattern3 = (
      /("|')(\s*)(@\{http:\/\/)([\n\s\S]*?)("|')/gm
    );
    const pattern4 = (
      /("|')(\s*)(@\{https:\/\/)([\n\s\S]*?)("|')/gm
    );

    const httpResult = lodash.chain(contentsParam)
		.replace(pattern1, (...p) => (
			`${p[1]}${p[2]}httpp${p[4]}${p[5]}`
		))
		.replace(pattern2, (...p) => (
			`${p[1]}${p[2]}httpps${p[4]}${p[5]}`
		))
		.replace(pattern3, (...p) => (
			`${p[1]}${p[2]}@{httpp${p[4]}${p[5]}`
		))
		.replace(pattern4, (...p) => (
			`${p[1]}${p[2]}@{httpps${p[4]}${p[5]}`
		))
		.value();

    const minifyResult = (
			await minify(httpResult, {
				html5: true,
				minifyCSS: false,
				minifyJS: false,
				minifyURLs: false,
				removeComments: true,
				removeAttributeQuotes: false,
				removeEmptyAttributes: true,
				removeEmptyElements: false,
				removeOptionalTags: false,
				removeRedundantAttributes: false,
				removeTagWhitespace: false,
				keepClosingSlash: true,
				includeAutoGeneratedTags: false,
				maxLineLength: 0,
				noNewlinesBeforeTagClose: false,
				trimCustomFragments: false,
				removeStyleLinkTypeAttributes: true,
				removeScriptTypeAttributes: true,
				caseSensitive: true,
				useShortDoctype: true,
				collapseBooleanAttributes:  false,
				decodeEntities: true,
				collapseWhitespace: true,
				collapseInlineTagWhitespace: true,
				preserveLineBreaks: true,
				conservativeCollapse: true,
				preventAttributesEscaping: true,
				quoteCharacter: '"',
				sortClassName: true,
				sortAttributes: true,
				continueOnParseError: true,
				processScripts: [],
				processConditionalComments: false,
			})
		);

		const baseOptions1: StripOptions = {
      language: "html",
      preserveNewlines: false,
      keepProtected: false,
      block: true,
      line: true,
		};
		const baseOptions2: StripOptions = {
      language: "javascript",
      preserveNewlines: false,
      keepProtected: false,
      block: true,
      line: true,
    };
		const baseOptions3: StripOptions = {
      language: "css",
      preserveNewlines: false,
      keepProtected: false,
      block: true,
      line: true,
		};

		const stripResult1 = strip(
			minifyResult,
			baseOptions1
		);
		const stripResult2 = strip(
			stripResult1,
			baseOptions2
		);
		const stripResult3 = strip(
			stripResult2,
			baseOptions3
		);

    // 2. `httpp` -> `http://`
    const pattern1Re = (
      /("|')(\s*)(httpp)([\n\s\S]*?)("|')/gm
    );
    const pattern2Re = (
      /("|')(\s*)(httpps)([\n\s\S]*?)("|')/gm
    );
    const pattern3Re = (
      /("|')(\s*)(@\{httpp)([\n\s\S]*?)("|')/gm
    );
    const pattern4Re = (
      /("|')(\s*)(@\{httpps)([\n\s\S]*?)("|')/gm
    );
    const pattern5 = (
      /(\n)(\s*)(\n)/gm
    );

    const finalResult = lodash.chain(stripResult3)
		.replace(pattern1Re, (...p) => (
			`${p[1]}${p[2]}http://${p[4]}${p[5]}`
		))
		.replace(pattern2Re, (...p) => (
			`${p[1]}${p[2]}https://${p[4]}${p[5]}`
		))
		.replace(pattern3Re, (...p) => (
			`${p[1]}${p[2]}@{http://${p[4]}${p[5]}`
		))
		.replace(pattern4Re, (...p) => (
			`${p[1]}${p[2]}@{https://${p[4]}${p[5]}`
		))
		.replace(pattern5, (...p) => (
			`${p[1]}`
		))
		.value();

    console.log(`_____________________\n [${fileExt}] 'removeComments' Activated!`);
    return finalResult;
  }
  catch (err: any) {
    console.error(`_____________________\n [${fileExt}] 'removeComments' Error!\n${err.message}`);
    return contentsParam;
  }
};

// 1. prettierFormat -------------------------------------------------------------------------------
export const prettierFormat = async (
  contentsParam: string,
  fileName: string,
  fileTabSize: number,
  fileEol: string,
	fileExt: string
) => {
  try {
    const baseOptions: PrettierOptions = {
      parser: "html",
      singleQuote: false,
      printWidth: 1000,
      tabWidth: fileTabSize,
      useTabs: true,
      quoteProps: "as-needed",
      jsxSingleQuote: false,
      trailingComma: "all",
      bracketSpacing: false,
      jsxBracketSameLine: false,
      arrowParens: "always",
      rangeStart: 0,
      rangeEnd: Infinity,
      requirePragma: false,
      insertPragma: false,
      proseWrap: "preserve",
      htmlWhitespaceSensitivity: "ignore",
      vueIndentScriptAndStyle: true,
      endOfLine: fileEol === "lf" ? "lf" : "crlf",
      embeddedLanguageFormatting: "auto",
      singleAttributePerLine: false,
      bracketSameLine: false,
      semi: true,
    };

    const rules1 = (
      /(&nbsp;)/gm
    );
    const rules2 = (
      /(\s*)[^`'"](<.*>)(<)(input|label|a|b|p|span|select|div|option|bold|caption|strong)/gm
    );

    const result = lodash.chain(contentsParam)
		.replace(rules1, (...p) => (
			""
		))
		.replace(rules2, (...p) => (
			`${p[1]}${p[2]}\n${p[1]}\t${p[3]}${p[4]}`
		))
		.value();

    console.log(`_____________________\n [${fileExt}] 'prettierFormat' Activated!`);
    const finalResult = prettier.format(result, baseOptions);

    return finalResult;
  }
  catch (err: any) {
    const msg = err.message.toString().trim().replace(/\x1B\[[0-9;]*[mGKF]/g, "");
    const msgRegex = /([\n\s\S]*)(\s*)(https)(.*?)([(])(.*?)([)])([\n\s\S]*)/gm;
    const msgRegexReplace = `[JLINT]\n\nError Line = [ $6 ]\nError Site = $8`;
    const msgResult = msg.replace(msgRegex, msgRegexReplace);

    console.error(`_____________________\n 'prettierFormat' Error! ('${fileName}')\n${msgResult}`);
    vscode.window.showInformationMessage(msgResult, { modal: true });
    return contentsParam;
  }
};

// 2. insertSpace ----------------------------------------------------------------------------------
export const insertSpace = async (
  contentsParam: string,
	fileExt: string
) => {
  try {
    const rules1 = (
      /(\s*)(\))(\s+)(;)/gm
    );
    const rules2 = (
      /(\s*)(@)(\s*)([\s\S]*?)(\s*)(\()/gm
    );
    const rules3 = (
      /(\s*?)(ception)(\{)/gm
    );

		const finalResult = lodash.chain(contentsParam)
		.replace(rules1, (...p) => (
			`${p[1]}${p[2]};`
		))
		.replace(rules2, (...p) => (
			`${p[1]}${p[2]}${p[4]} ${p[6]}`
		))
		.replace(rules3, (...p) => (
			`${p[2]} ${p[3]}`
		))
		.value();

    console.log(`_____________________\n [${fileExt}] 'insertSpace' Activated!`);
    return finalResult
  }
  catch (err: any) {
		console.error(`_____________________\n [${fileExt}] 'insertSpace' Error!\n${err.message}`);
    return contentsParam;
  }
};

// 3. insertLine -----------------------------------------------------------------------------------
export const insertLine = async (
  contentsParam: string,
	fileExt: string
) => {
  try {
    const rules1 = (
      /^(?!\/\/--)(?:\n*)(\s*)([<]head\s*.*\s*[>])(\s*?)/gm
    );
    const rules2 = (
      /^(?!\/\/--)(?:\n*)(\s*)([<]body\s*.*\s*[>])(\s*?)/gm
    );
    const rules3 = (
      /^(?!\/\/--)(?:\n*)(\s*)([<]header\s*.*\s*[>])(\s*?)/gm
    );
    const rules4 = (
      /^(?!\/\/--)(?:\n*)(\s*)([<]main\s*.*\s*[>])(\s*?)/gm
    );
    const rules5 = (
      /^(?!\/\/--)(?:\n*)(\s*)([<]footer\s*.*\s*[>])(\s*?)/gm
    );
    const rules6 = (
      /^(?!\/\/--)(?:\n*)(\s*)([<]section\s*.*\s*[>])(\s*?)/gm
    );
    const rules7 = (
      /^(?!\/\/--)(?:\n*)(\s*)([<]table\s*.*\s*[>])(\s*?)/gm
    );
    const rules8 = (
      /^(?!\/\/--)(?:\n*)(\s*)([<]form\s*.*\s*[>])(\s*?)/gm
    );
    const rules9 = (
      /^(?!\/\/--)(?:\n*)(\s*)([<]div class="row\s*.*\s*[>])(\s*?)/gm
    );

    const finalResult = lodash.chain(contentsParam)
		.replace(rules1, (...p) => {
			const spaceSize = 100 - (p[1].length + `<!--`.length + `-`.length);
			const insetLine = `<!--` + '-'.repeat(spaceSize) + `-->`;
			return `\n${p[1]}${insetLine}\n${p[1]}${p[2]}${p[3]}`;
		})
		.replace(rules2, (...p) => {
			const spaceSize = 100 - (p[1].length + `<!--`.length + `-`.length);
			const insetLine = `<!--` + '-'.repeat(spaceSize) + `-->`;
			return `\n${p[1]}${insetLine}\n${p[1]}${p[2]}${p[3]}`;
		})
		.replace(rules3, (...p) => {
			const spaceSize = 100 - (p[1].length + `<!--`.length + `-`.length);
			const insetLine = `<!--` + '-'.repeat(spaceSize) + `-->`;
			return `\n${p[1]}${insetLine}\n${p[1]}${p[2]}${p[3]}`;
		})
		.replace(rules4, (...p) => {
			const spaceSize = 100 - (p[1].length + `<!--`.length + `-`.length);
			const insetLine = `<!--` + '-'.repeat(spaceSize) + `-->`;
			return `\n${p[1]}${insetLine}\n${p[1]}${p[2]}${p[3]}`;
		})
		.replace(rules5, (...p) => {
			const spaceSize = 100 - (p[1].length + `<!--`.length + `-`.length);
			const insetLine = `<!--` + '-'.repeat(spaceSize) + `-->`;
			return `\n${p[1]}${insetLine}\n${p[1]}${p[2]}${p[3]}`;
		})
		.replace(rules6, (...p) => {
			const spaceSize = 100 - (p[1].length + `<!--`.length + `-`.length);
			const insetLine = `<!--` + '-'.repeat(spaceSize) + `-->`;
			return `\n${p[1]}${insetLine}\n${p[1]}${p[2]}${p[3]}`;
		})
		.replace(rules7, (...p) => {
			const spaceSize = 100 - (p[1].length + `<!--`.length + `-`.length);
			const insetLine = `<!--` + '-'.repeat(spaceSize) + `-->`;
			return `\n${p[1]}${insetLine}\n${p[1]}${p[2]}${p[3]}`;
		})
		.replace(rules8, (...p) => {
			const spaceSize = 100 - (p[1].length + `<!--`.length + `-`.length);
			const insetLine = `<!--` + '-'.repeat(spaceSize) + `-->`;
			return `\n${p[1]}${insetLine}\n${p[1]}${p[2]}${p[3]}`;
		})
		.replace(rules9, (...p) => {
			const spaceSize = 100 - (p[1].length + `<!--`.length + `-`.length);
			const insetLine = `<!--` + '-'.repeat(spaceSize) + `-->`;
			return `\n${p[1]}${insetLine}\n${p[1]}${p[2]}${p[3]}`;
		})
		.value();

    console.log(`_____________________\n [${fileExt}] 'insertLine' Activated!`);
    return finalResult
  }
  catch (err: any) {
		console.error(`_____________________\n [${fileExt}] 'insertLine' Error!\n${err.message}`);
    return contentsParam;
  }
};

// 4. lineBreak ------------------------------------------------------------------------------------
export const lineBreak = async (
  contentsParam: string,
	fileExt: string
) => {
  try {
    const rules1 = (
      /(?:\n*)(\s*)(<\/body>)(\s*?)/gm
    );
    const rules2 = (
      /(.*?)(\n*)(\s*)(\/\/ -.*>)/gm
    );

    const finalResult = lodash.chain(contentsParam)
		.replace(rules1, (...p) => (
			`\n\n${p[1]}${p[2]}${p[3]}`
		))
		.replace(rules2, (...p) => (
			`${p[1]}\n\n${p[3]}${p[4]}`
		))
		.value();

    console.log(`_____________________\n [${fileExt}] 'lineBreak' Activated!`);
    return finalResult
  }
  catch (err: any) {
    console.error(`_____________________\n [${fileExt}] 'lineBreak' Error!\n${err.message}`);
    return contentsParam;
  }
};

// 5. finalCheck -----------------------------------------------------------------------------------
export const finalCheck = async (
  contentsParam: string,
	fileExt: string
) => {
  try {
    const rules1 = (
      /(\s*)(<!)(--.*?)(>)(\s*)(\n)(\s*)(<!)(--.*?)(>)([\s\S])/gm
    );
    const rules2 = (
      /(\s*)(<!)(--.*?)(>)(\s*)(\n)(\s*)(<!)(--.*?)(>)([\s\S])/gm
    );

    const finalResult = lodash.chain(contentsParam)
		.replace(rules1, (...p) => (
			`${p[1]}${p[2]}${p[3]}${p[4]}${p[11]}`
		))
		.replace(rules2, (...p) => (
			`${p[1]}${p[2]}${p[3]}${p[4]}${p[11]}`
		))
		.value();

    console.log(`_____________________\n [${fileExt}] 'finalCheck' Activated!`);
    return finalResult
  }
  catch (err: any) {
    console.error(`_____________________\n [${fileExt}] 'finalCheck' Error!\n${err.message}`);
    return contentsParam;
  }
};